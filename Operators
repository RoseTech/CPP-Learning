 ____________________________________________________________________________________________________________________
|                                                                                                                    |
|From greatest to smallest priority, C++ operators are evaluated in the following order:                             |
|                                                                                                                    |
|--------------------------------------------------------------------------------------------------------------------|
|Level |  Precedence group              |  Operator          |  Description                       |  Grouping        |
|------|--------------------------------|--------------------|------------------------------------|------------------|
|1     |  Scope                         |  ::                |  scope qualifier                   |  Left-to-right   |
|------|--------------------------------|--------------------|------------------------------------|------------------|
|2     |  Postfix (unary)               |  ++ --             |  postfix increment / decrement     |  Left-to-right   |
|      |  "             "               |  ()                |  functional forms                  |  Left-to-right   |
|      |  "             "               |  []                |  subscript                         |  Left-to-right   |
|      |  "             "               |  . ->              |  member access                     |  Left-to-right   |
|------|--------------------------------|--------------------|------------------------------------|------------------|
|3     |  Prefix (unary)                |  ++ --             |  prefix increment / decrement      |  Right-to-left   |
|      |  "            "                |  ~ !               |  bitwise NOT / logical NOT         |  Right-to-left   |
|      |  "            "                |  + -               |  unary prefix                      |  Right-to-left   |
|      |  "            "                |  & *               |  reference / dereference           |  Right-to-left   |   
|      |  "            "                |  new delete        |  allocation / deallocation         |  Right-to-left   |
|      |  "            "                |  sizeof            |  parameter pack                    |  Right-to-left   |
|      |  "            "                |  (type)            |  C-style type-casting              |  Right-to-left   |
|------|--------------------------------|--------------------|------------------------------------|------------------|
|4     |  Pointer-to-member             |  .* ->*            |  access pointer                    |  Left-to-right   |
|------|--------------------------------|--------------------|------------------------------------|------------------|
|5     |  Arithmetic: scaling           |  * / %             |  multiply, divide, modulo          |  Left-to-right   |
|------|--------------------------------|--------------------|------------------------------------|------------------|
|6     |  Arithmetic: addition          |  + -               |  addition, subtraction             |  Left-to-right   |
|------|--------------------------------|--------------------|------------------------------------|------------------|
|7     |  Bitwise shift                 |  << >>             |  shift left, shift right           |  Left-to-right   |
|------|--------------------------------|--------------------|------------------------------------|------------------|
|8     |  Relational                    |  < > <= >=         |  comparison operators              |  Left-to-right   |
|------|--------------------------------|--------------------|------------------------------------|------------------|
|9     |  Equality                      |  == !=             |  equality / inequality             |  Left-to-right   |
|------|--------------------------------|--------------------|------------------------------------|------------------|
|10    |  And                           |  &                 |  bitwise AND                       |  Left-to-right   |
|------|--------------------------------|--------------------|------------------------------------|------------------|
|11    |  Exclusive or                  |  ^                 |  bitwise XOR                       |  Left-to-right   |
|------|--------------------------------|--------------------|------------------------------------|------------------|
|12    |  Inclusive or                  |  |                 |  bitwise OR                        |  Left-to-right   |
|------|--------------------------------|--------------------|------------------------------------|------------------|
|13    |  Conjunction                   |  &&                |  logical AND                       |  Left-to-right   |
|------|--------------------------------|--------------------|------------------------------------|------------------|
|14    |  Disjunction                   |  ||                |  logical OR                        |  Left-to-right   |
|------|--------------------------------|--------------------|------------------------------------|------------------|   
|15    |  Assignment-level expressions  |  = *= /= %= += -=  |  assignment / compound assignment  |  Right-to-left   |
|      |  "                          "  |  >>= <<= &= ^= |=  |  assignment / compound assignment  |  Right-to-left   | 
|      |  "                          "  |  ?:                |  conditional operator              |  Right-to-left   |
|------|--------------------------------|--------------------|------------------------------------|------------------|
|16    |  Sequencing                    |  ,                 |  comma separator                   |  Left-to-right   |
 --------------------------------------------------------------------------------------------------------------------
